"""Buf-Gazelle hybrid build system integration for XDS protobuf generation."""

load("@io_bazel_rules_go//go:def.bzl", "go_library")

def xds_buf_proto_package(
        name = "pkg", 
        srcs = [],
        deps = [],
        has_services = False,
        visibility = ["//visibility:public"]):
    """Create Bazel targets that reference buf-generated protobuf files.
    
    This macro creates Bazel targets that work with files generated by buf.
    The workflow integrates buf generation with Bazel via Gazelle:
    
    1. Run tools/generate_protobuf.sh to generate files using buf
    2. Run tools/update_gazelle.sh to update BUILD files for generated Go files
    3. Bazel can then build using the buf-generated sources
    
    Args:
        name: Target name (typically "pkg")
        srcs: Proto source files (defaults to *.proto)
        deps: Dependencies on other proto packages
        has_services: Whether this package contains gRPC services
        visibility: Target visibility
    """
    
    if srcs == []:
        srcs = native.glob(["*.proto"])

    package_path = native.package_name()
    
    # Create a coordination target that ensures buf generation is up to date
    native.genrule(
        name = name + "_buf_gen",
        srcs = srcs + [
            "//:buf.yaml",
            "//:buf.gen.go.yaml",
            "//:buf.gen.python.yaml", 
        ],
        outs = [name + "_buf.stamp"],
        cmd = """
        # This target coordinates with buf generation
        # Actual generation is done by tools/generate_protobuf.sh
        echo "Buf generation coordinated: $(date)" > $@
        """,
        visibility = ["//visibility:private"],
        message = "Coordinating protobuf generation with buf",
    )
    
    # Note: Go targets are managed by Gazelle after buf generation
    # Gazelle will create go_library targets in //go/{package_path}/BUILD.bazel
    # based on the .pb.go files generated by buf
    
    # Create Python library targets for buf-generated files
    native.py_library(
        name = name + "_py_proto",
        srcs = native.glob([
            "../../python/" + package_path + "/*_pb2.py",
        ], allow_empty = True),
        visibility = visibility,
        deps = [
            "//python/validate:validate_py_proto",
        ] + [dep + "_py_proto" for dep in deps],
    )

# Backwards compatibility with existing API build system
def xds_proto_package_buf(**kwargs):
    """Buf-based alternative to xds_proto_package."""
    xds_buf_proto_package(**kwargs)