// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: xds/type/matcher/v3/cel.proto

package matcherv3

import (
	_ "github.com/cncf/xds/go/buf/validate"
	v3 "github.com/cncf/xds/go/xds/type/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Performs a match by evaluating a `Common Expression Language
// <https://github.com/google/cel-spec>`_ (CEL) expression against the standardized set of
// :ref:`HTTP attributes <arch_overview_attributes>` specified via “HttpAttributesCelMatchInput“.
//
// .. attention::
//
//	The match is ``true``, iff the result of the evaluation is a bool AND true.
//	In all other cases, the match is ``false``, including but not limited to: non-bool types,
//	``false``, ``null``, ``int(1)``, etc.
//	In case CEL expression raises an error, the result of the evaluation is interpreted "no match".
//
// Refer to :ref:`Unified Matcher API <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>` documentation
// for usage details.
//
// [#comment: envoy.matching.matchers.cel_matcher]
type CelMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either parsed or checked representation of the CEL program.
	ExprMatch *v3.CelExpression `protobuf:"bytes,1,opt,name=expr_match,json=exprMatch,proto3" json:"expr_match,omitempty"`
	// Free-form description of the CEL AST, e.g. the original expression text, to be
	// used for debugging assistance.
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CelMatcher) Reset() {
	*x = CelMatcher{}
	mi := &file_xds_type_matcher_v3_cel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CelMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CelMatcher) ProtoMessage() {}

func (x *CelMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_xds_type_matcher_v3_cel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CelMatcher.ProtoReflect.Descriptor instead.
func (*CelMatcher) Descriptor() ([]byte, []int) {
	return file_xds_type_matcher_v3_cel_proto_rawDescGZIP(), []int{0}
}

func (x *CelMatcher) GetExprMatch() *v3.CelExpression {
	if x != nil {
		return x.ExprMatch
	}
	return nil
}

func (x *CelMatcher) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_xds_type_matcher_v3_cel_proto protoreflect.FileDescriptor

const file_xds_type_matcher_v3_cel_proto_rawDesc = "" +
	"\n" +
	"\x1dxds/type/matcher/v3/cel.proto\x12\x13xds.type.matcher.v3\x1a\x15xds/type/v3/cel.proto\x1a\x1bbuf/validate/validate.proto\"q\n" +
	"\n" +
	"CelMatcher\x12A\n" +
	"\n" +
	"expr_match\x18\x01 \x01(\v2\x1a.xds.type.v3.CelExpressionB\x06\xbaH\x03\xc8\x01\x01R\texprMatch\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescriptionB\xc8\x01\n" +
	"\x17com.xds.type.matcher.v3B\bCelProtoP\x01Z4github.com/cncf/xds/go/xds/type/matcher/v3;matcherv3\xa2\x02\x03XTM\xaa\x02\x13Xds.Type.Matcher.V3\xca\x02\x13Xds\\Type\\Matcher\\V3\xe2\x02\x1fXds\\Type\\Matcher\\V3\\GPBMetadata\xea\x02\x16Xds::Type::Matcher::V3b\x06proto3"

var (
	file_xds_type_matcher_v3_cel_proto_rawDescOnce sync.Once
	file_xds_type_matcher_v3_cel_proto_rawDescData []byte
)

func file_xds_type_matcher_v3_cel_proto_rawDescGZIP() []byte {
	file_xds_type_matcher_v3_cel_proto_rawDescOnce.Do(func() {
		file_xds_type_matcher_v3_cel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_xds_type_matcher_v3_cel_proto_rawDesc), len(file_xds_type_matcher_v3_cel_proto_rawDesc)))
	})
	return file_xds_type_matcher_v3_cel_proto_rawDescData
}

var file_xds_type_matcher_v3_cel_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_xds_type_matcher_v3_cel_proto_goTypes = []any{
	(*CelMatcher)(nil),       // 0: xds.type.matcher.v3.CelMatcher
	(*v3.CelExpression)(nil), // 1: xds.type.v3.CelExpression
}
var file_xds_type_matcher_v3_cel_proto_depIdxs = []int32{
	1, // 0: xds.type.matcher.v3.CelMatcher.expr_match:type_name -> xds.type.v3.CelExpression
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_xds_type_matcher_v3_cel_proto_init() }
func file_xds_type_matcher_v3_cel_proto_init() {
	if File_xds_type_matcher_v3_cel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_xds_type_matcher_v3_cel_proto_rawDesc), len(file_xds_type_matcher_v3_cel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xds_type_matcher_v3_cel_proto_goTypes,
		DependencyIndexes: file_xds_type_matcher_v3_cel_proto_depIdxs,
		MessageInfos:      file_xds_type_matcher_v3_cel_proto_msgTypes,
	}.Build()
	File_xds_type_matcher_v3_cel_proto = out.File
	file_xds_type_matcher_v3_cel_proto_goTypes = nil
	file_xds_type_matcher_v3_cel_proto_depIdxs = nil
}
